<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>草爵的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangld5.github.io/"/>
  <updated>2019-10-14T14:31:58.121Z</updated>
  <id>http://wangld5.github.io/</id>
  
  <author>
    <name>草爵</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NLP-learning-report2</title>
    <link href="http://wangld5.github.io/2019/10/14/NLP-learning-report2/"/>
    <id>http://wangld5.github.io/2019/10/14/NLP-learning-report2/</id>
    <published>2019-10-14T08:14:10.000Z</published>
    <updated>2019-10-14T14:31:58.121Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前向传播"><a href="#前向传播" class="headerlink" title="前向传播"></a>前向传播</h3><p>考虑样本数据(x, y)，其中x为输入数据，y为实际数据，设根据x手动预测的值为y’，预测y’的过程是从输入层开始从左往右计算的，这个过程也叫前向传播。</p><h3 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h3><p>对神经网络中参数的优化过程，在神经网络中为了使预测值更接近于实际值，需要使用损失函数进行评估，为了优化损失函数使其值最小化，需要通过梯度下降法对损失函数进行求导进而优化神经元的权重和偏置，因为是从后往前更新参数，也叫后向传播。<br>常用的损失函数有交叉熵损失函数和softmax损失函数。</p><h3 id="skip-gram算法实现"><a href="#skip-gram算法实现" class="headerlink" title="skip-gram算法实现"></a>skip-gram算法实现</h3><p>对于Word2vec算法，目的在于使用一个窗口，通过中心词c和窗口中的外围词o，估计词的意思。而skip-gram模型是习得概率分布P(O=o|O=c)即中心词出现时外围词出现的概率进而通过中心词c估计外围词o的含义。<br>在word2vec中，这个条件概率分布是通过计算向量点积（dot-products），再应用naive-softmax函数得到的：  </p><script type="math/tex; mode=display">  P(O=o|O=c) = { \frac{exp(u_o^Tv_c)}{\sum_{w \in Vocab}{exp(u_w^Tv_c)}} }    $$  (1)其中$u_o$代表外围词，$v_c$代表中心词，我们使用U和V包含对应的所有词，这里我使用行向量表示词向量。定义对应的损失函数如下：</script><p>J_{naive-softmax}(v_c, o, U) = -logP(O=o|O=c)</p><script type="math/tex; mode=display">(2)为了使损失函数最小就要使概率最大化，即使c与o的关联更为紧密。设定如下变量：  $\hat{y}$对应公式(1)的结果，即预测值,$\hat{y}_k$表示第k个单词的概率大小  $y$对应真实值，这是一个one-hot向量。#### 偏导数由于权重矩阵为矩阵U和V，因此需要求中心词和外围词的倒数:  对$u_w$ :  $(\hat{y}-y)^T*v_c$  对$v_c$ :  $(\hat{y}-y)*U$  损失函数为: $-log(\hat{y_0})$  这个偏导数和损失函数的计算是naive-softmax函数的计算，但用这个函数进行梯度下降迭代优化损失函数会消耗很长时间，#### negative-softmax这个方法是找和中心词最不相关的词，进而可以确定哪些外围词和中心词有关系。  损失函数为：</script><p>J_{neg-softmax}(v_c, o, U) = -log(\sigma(u_o^Tv_c))-\sum_{k=1}^Klog(\sigma(u_k^Tv_c))</p><script type="math/tex; mode=display">对$v_c$的偏导数：</script><p>(\sigma(u_o^Tv_c)-1)u_o+\sum_{k=1}^K(1-\sigma(u_o^Tv_c))u_k</p><script type="math/tex; mode=display">对$u_w$的偏导数：</script><p>(\sigma(u_o^Tv_c)-1)v_c+\sum_{k=1}^K(1-\sigma(u_o^Tv_c))v_c</p><p>$$<br>用这种方法进行梯度下降的迭代会很快，因为只需要抽取几个无关单词向量进行更新迭代而不需要对整个权重矩阵进行更新。</p><h4 id="总损失函数"><a href="#总损失函数" class="headerlink" title="总损失函数"></a>总损失函数</h4><p>对于窗口下的总的损失函数只需要把这个窗口下中心词对应的那些外围词的损失函数相加即可。</p><h4 id="代码实现如下："><a href="#代码实现如下：" class="headerlink" title="代码实现如下："></a>代码实现如下：</h4><p>对于下面代码：<br>我的单词向量是1*V的行向量。<br>naive-softmax部分：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a, W, target = centerWordVec, outsideVectors, outsideWordIdx</span><br><span class="line">a = a.reshape((<span class="number">1</span>, a.shape[<span class="number">0</span>]))</span><br><span class="line"><span class="comment"># assume N words, V dimentions, so</span></span><br><span class="line"><span class="comment"># a.shape == (1, V) W.shape == (N, V) i.e: a is 1 * 3, W is 5 * 3</span></span><br><span class="line"></span><br><span class="line">z = np.dot(a, W.T) <span class="comment"># (1, N)</span></span><br><span class="line"><span class="comment">#print(z.shape)</span></span><br><span class="line">preds = softmax(z) <span class="comment"># (1, N)</span></span><br><span class="line"><span class="comment">#print(preds[0][target])</span></span><br><span class="line"></span><br><span class="line">loss = -np.log(preds[<span class="number">0</span>][target])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># backprop</span></span><br><span class="line">delta = preds.copy() <span class="comment"># (1, N)</span></span><br><span class="line">delta[<span class="number">0</span>][target] -= <span class="number">1.0</span></span><br><span class="line"><span class="comment">#print(delta.shape)</span></span><br><span class="line"></span><br><span class="line">gradCenterVec = np.dot(delta, W) <span class="comment"># (1, V) dJ/dv_c = (y_hat-y)*U</span></span><br><span class="line"></span><br><span class="line">gradOutsideVecs = np.dot(delta.T, a) <span class="comment"># (N, V) (y_hat-y)*v_c</span></span><br></pre></td></tr></table></figure></p><p>neg-softmax部分：<br>这一部分要先将选择的无关单词和中心词构建一个矩阵，然后进行计算，因为涉及矩阵运算而且y为one-hot矩阵，因此计算损失函数的时候有一点小技巧，这个不难理解。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">W = np.zeros((len(indices), outsideVectors.shape[<span class="number">1</span>]))<span class="comment"># (K+1, V)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(indices)):</span><br><span class="line">    W[i] = outsideVectors[indices[i]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># forward</span></span><br><span class="line">a = centerWordVec</span><br><span class="line">a = a.reshape((<span class="number">1</span>, a.shape[<span class="number">0</span>])) <span class="comment"># (1, V)</span></span><br><span class="line"></span><br><span class="line">z = np.dot(a, W.T) <span class="comment"># (1, 1+K)</span></span><br><span class="line">preds = sigmoid(z) <span class="comment"># (1, K+1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># backprop</span></span><br><span class="line">y = np.zeros((<span class="number">1</span>, preds.shape[<span class="number">1</span>]))</span><br><span class="line">y[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span> <span class="comment"># index 0 is target</span></span><br><span class="line"></span><br><span class="line">loss = -(y*np.log(preds) + (<span class="number">1</span> - y)*np.log(<span class="number">1</span> - preds)).sum()</span><br><span class="line"></span><br><span class="line">delta = preds - y <span class="comment"># (1, 1+K)</span></span><br><span class="line"><span class="comment">#print(delta.shape)</span></span><br><span class="line">gradCenterVec = np.dot(delta, W) <span class="comment"># (1, V)</span></span><br><span class="line">gradW = np.dot(delta.T, a) <span class="comment"># (K+1, V)</span></span><br><span class="line"></span><br><span class="line">gradOutsideVecs = np.zeros_like(outsideVectors)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(indices)):</span><br><span class="line">    oi = indices[i]</span><br><span class="line">    gradOutsideVecs[oi] += gradW[i]</span><br></pre></td></tr></table></figure></p><p>总的损失函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">loss = <span class="number">0.0</span></span><br><span class="line">gradCenterVecs = np.zeros(centerWordVectors.shape)</span><br><span class="line"><span class="comment">#print(centerWordVectors[0])</span></span><br><span class="line">gradOutsideVectors = np.zeros(outsideVectors.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">### YOUR CODE HERE</span></span><br><span class="line">ci = word2Ind[currentCenterWord]</span><br><span class="line">vc = centerWordVectors[ci]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> o <span class="keyword">in</span> outsideWords:</span><br><span class="line">    oi = word2Ind[o]</span><br><span class="line">    loss_, gradVc, gradUo = word2vecLossAndGradient(vc, oi, outsideVectors, dataset)</span><br><span class="line">    gradVc = gradVc.reshape(<span class="number">-1</span>)</span><br><span class="line">    <span class="comment">#gradUo = gradUo.reshape(-1)</span></span><br><span class="line">    gradCenterVecs[ci] += gradVc</span><br><span class="line">    gradOutsideVectors += gradUo</span><br><span class="line">    loss += loss_</span><br></pre></td></tr></table></figure></p><h4 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h4><p>调用函数计算梯度，然后在初始值x的基础上减去梯度进行迭代直到损失降到一个给定范围。</p><h4 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前向传播&quot;&gt;&lt;a href=&quot;#前向传播&quot; class=&quot;headerlink&quot; title=&quot;前向传播&quot;&gt;&lt;/a&gt;前向传播&lt;/h3&gt;&lt;p&gt;考虑样本数据(x, y)，其中x为输入数据，y为实际数据，设根据x手动预测的值为y’，预测y’的过程是从输入层开始从左往右计
      
    
    </summary>
    
    
    
      <category term="NLP" scheme="http://wangld5.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>NLP-learning-report1</title>
    <link href="http://wangld5.github.io/2019/10/10/NLP-learning-report1/"/>
    <id>http://wangld5.github.io/2019/10/10/NLP-learning-report1/</id>
    <published>2019-10-10T02:59:12.000Z</published>
    <updated>2019-10-11T02:43:35.263Z</updated>
    
    <content type="html"><![CDATA[<h3 id="word-embeddings"><a href="#word-embeddings" class="headerlink" title="word embeddings"></a>word embeddings</h3><p>单词嵌入是指通过建立单词间联系的向量通过向量的形式特征化单词，例如使用共现矩阵或者word2vec的方式构造单词向量。</p><h3 id="词向量"><a href="#词向量" class="headerlink" title="词向量"></a>词向量</h3><p>在NLP中，使用向量代表一个单词，词向量又被称为word embeddings。<br>获得词向量的方法包括one-hot,即建立一个one-hot矩阵表示一个词，但这样的话会导致不同的单词有不同的矩阵且他们之间没有任何联系。<br>第二种方法是使用共现矩阵，具体的实现是通过定位中心词汇和窗口大小，利用中心词汇的上下文词汇来构造一个矩阵，在这个矩阵中我们可以判断出与中心词汇频繁出现的词汇有哪些，通过SVD来对这个矩阵进行降维找到特征值相近的两个单词，那么这两个单词的语义或语境就相似。共现矩阵是统计方法.<br><img src="NLP-learning-report1/report-1.PNG" alt><br>第三种是word2vec，主要分为CBOW（Continuous Bag of Words）和Skip-Gram两种模式。CBOW是从原始语句推测目标字词，对于CBOW而言,具体过程是  </p><ol><li>为每一个单词的上下文词汇生成一个one-hot向量</li><li>通过输入词向量矩阵U的权重矩阵和这些上下文词汇生成的one-hot向量的乘积</li><li>求乘积的均值.</li><li>根据均值和输出权重矩阵V的乘积得到一个分数，将这个分数放进softmax函数中求得与真实值的差距。</li><li>关于权重矩阵的求法，使用SGD使一下公式的结果最小化:<br><img src="NLP-learning-report1/report-2.PNG" alt><br>这里补充的是无论是U矩阵还是V矩阵，其中的列向量在一开始都是随机生成的，为了使概率最大化，在中心词汇每次出现在语料库的时候使用SGD更新概率使概率达到最大值。</li></ol><p>而Skip-Gram正好相反，是从目标字词推测出原始语句。过程和CBOW相反。</p><h3 id="相似性评估"><a href="#相似性评估" class="headerlink" title="相似性评估"></a>相似性评估</h3><p>评估一个单词向量对的相似性可以使用余弦距离，两个单词向量对的余弦距离短，则说明相似性高。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;word-embeddings&quot;&gt;&lt;a href=&quot;#word-embeddings&quot; class=&quot;headerlink&quot; title=&quot;word embeddings&quot;&gt;&lt;/a&gt;word embeddings&lt;/h3&gt;&lt;p&gt;单词嵌入是指通过建立单词间联系的向量
      
    
    </summary>
    
    
    
      <category term="NLP" scheme="http://wangld5.github.io/tags/NLP/"/>
    
  </entry>
  
</feed>
