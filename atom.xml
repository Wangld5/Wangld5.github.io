<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>草爵的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangld5.github.io/"/>
  <updated>2019-11-06T08:21:50.973Z</updated>
  <id>http://wangld5.github.io/</id>
  
  <author>
    <name>草爵</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NLPlearning-CoreferenceResolution</title>
    <link href="http://wangld5.github.io/2019/11/06/NLPlearning-CoreferenceResolution/"/>
    <id>http://wangld5.github.io/2019/11/06/NLPlearning-CoreferenceResolution/</id>
    <published>2019-11-06T08:06:11.000Z</published>
    <updated>2019-11-06T08:21:50.973Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="NLP" scheme="http://wangld5.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>NLPleaning-Transformer</title>
    <link href="http://wangld5.github.io/2019/11/06/NLPleaning-Transformer/"/>
    <id>http://wangld5.github.io/2019/11/06/NLPleaning-Transformer/</id>
    <published>2019-11-06T08:05:37.000Z</published>
    <updated>2019-11-06T11:06:03.685Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><p>结构：<br><img src="https://github.com/Wangld5/images/raw/master/images/transformer.jpg" alt><br>实际上，transformer模型是encoder-decoder模型的集成形式，在encoder部分包括了六个encoder层，同样在decoder部分包含了六个decoder层，每一个encoder中包含了两层网络，一个是self-attention，另一个是feed forward neural network。每一个decoder另外在这两层中间包含了encoder-decoder attention，用来联系encoder层中源单词的编码和target的单词编码。</p><h3 id="self-attention"><a href="#self-attention" class="headerlink" title="self-attention"></a>self-attention</h3><p>$Attention(Q,K,V)=softmax(\frac{QK^T}{\sqrt d_k})V$<br>这个公式为自注意力的公式，自注意力是用来表示源句中词与词之间的联系性和指代关系，进而根据这个词的上下文推断这个词的词向量，这个公式中的Q，K，V是用句子中对应的词的embedding乘以$W^Q,W^K,W^V$得到的向量query，key，value，然后根据每一个单词的query值对其他单词的key值做点乘，然后归一化（$d_k$是维度）后做softmax函数乘以value值，这个value值和query值相同，用于保存当前词的关注度不变的情况下降低其他词的影响力，最后全部相加求和得到其他所有词对于query向量对应的词的权重，标志这个词在句子中的影响程度。我的理解是对于一个句子中有指代关系的两个词应该会有相同的影响程度表示这两个词在这个句子中是有联系的，词向量也应该相关。<br><img src="https://github.com/Wangld5/images/raw/master/images/QKV-1.jpg" alt><br><img src="https://github.com/Wangld5/images/raw/master/images/QKV-2.jpg" alt>  </p><h3 id="multi-head-attention"><a href="#multi-head-attention" class="headerlink" title="multi-head attention"></a>multi-head attention</h3><p>这个层是多个self-attention相结合构成的，可以拓展关注不同位置的能力，进一步综合每个词在句子中的表现程度。可以说不论是在意思上还是在语法等方面都加以考虑以得到最符合这个句子的该词的词向量。<br>在multi-head中为每一个head维护一套$Q,K,V$，这样的话就会有一套随机生成的$W^Q,W^K,W^V$矩阵，通过优化这些矩阵得到最好的权重，最后将得到的每一个attention矩阵合并在乘以一个$W^0$的矩阵压缩成一个维度和attention相同的矩阵。</p><h3 id="norm"><a href="#norm" class="headerlink" title="norm"></a>norm</h3><p>这个归一化层是为了保证每一个encoder的输出不会在激活函数的饱和区。</p><h3 id="position-embedding"><a href="#position-embedding" class="headerlink" title="position embedding"></a>position embedding</h3><p>从这个图中可以看到输入的词向量会加上该词在句子中的位置embedding作为最终输入，在transformer中每个单词在句子中的position embedding表示为：<br>$PE(pos, 2i)=sin(\frac{pos}{10000\frac{2i}{d_{model}}})$<br>$PE(pos, 2i+1)=cos(\frac{pos}{10000\frac{2i}{d_{model}}})$<br>这样做是考虑了单词的相对位置信息。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>transformer是一种预训练模型用于得到对应于训练集的词向量。相对于RNN而言它有很好的并行性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Transformer&quot;&gt;&lt;a href=&quot;#Transformer&quot; class=&quot;headerlink&quot; title=&quot;Transformer&quot;&gt;&lt;/a&gt;Transformer&lt;/h3&gt;&lt;p&gt;结构：&lt;br&gt;&lt;img src=&quot;https://github.co
      
    
    </summary>
    
    
    
      <category term="NLP" scheme="http://wangld5.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>NLPlearning-SubwordModel</title>
    <link href="http://wangld5.github.io/2019/10/30/NLPlearning-SubwordModel/"/>
    <id>http://wangld5.github.io/2019/10/30/NLPlearning-SubwordModel/</id>
    <published>2019-10-30T13:29:52.000Z</published>
    <updated>2019-11-06T06:46:57.061Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>针对词库中词汇量不足的情况，对每一个单词的字母进行embedding。</p><h3 id="Byte-Pair-Encoding"><a href="#Byte-Pair-Encoding" class="headerlink" title="Byte Pair Encoding"></a>Byte Pair Encoding</h3><p>这个算法是一种压缩算法，对于最频繁出现的字母进行组合成为一个新的字母块。</p><ol><li>start with a vocabulary of characters</li><li>most frequent n gram pairs -&gt; new pairs</li><li>detect the dictionary and recycle step 2</li><li>stop until reach the target size of vocabulary</li><li>the pairs in the vocabulary can be use to build new pairs or words</li></ol><h3 id="Fast-text"><a href="#Fast-text" class="headerlink" title="Fast text"></a>Fast text</h3><p>针对word2vec忽略了词之间形态的联系性，因为word2vec使用每个单词生成一个词向量，忽略了单词的内部特征。fast text使用n gram表示单词，一个单词就是n gram字母的集合。与CBOW的对比：</p><ol><li>CBOW的输入是目标单词的上下文，fastText的输入是多个单词及其n-gram特征，这些特征用来表示单个文档；</li><li>CBOW的输入单词被one-hot编码过，fastText的输入特征是被embedding过；</li><li>CBOW的输出是目标词汇，fastText的输出是文档对应的类标。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h3&gt;&lt;p&gt;针对词库中词汇量不足的情况，对每一个单词的字母进行embedding。&lt;/p&gt;
&lt;h3 id=&quot;Byte-Pair-Encoding&quot;&gt;&lt;a
      
    
    </summary>
    
    
    
      <category term="NLP" scheme="http://wangld5.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>NLPlearning-CNN</title>
    <link href="http://wangld5.github.io/2019/10/30/NLPlearning-CNN/"/>
    <id>http://wangld5.github.io/2019/10/30/NLPlearning-CNN/</id>
    <published>2019-10-30T12:39:29.000Z</published>
    <updated>2019-11-06T06:46:55.623Z</updated>
    
    <content type="html"><![CDATA[<h3 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h3><p>在NLP中，对一个句子中的word embeddings做卷积是对这个句子提取特征，具体是用一个卷积核对句子的word embeddings做矩阵乘法。</p><h3 id="池化（pooling）"><a href="#池化（pooling）" class="headerlink" title="池化（pooling）"></a>池化（pooling）</h3><p>本质上是对做完卷积的word embeddings进一步提取特征，获取做完卷积那一部分的最大或者平均特征取决于是max pooling还是average pooling。</p><h3 id="多通道（multi-channel）"><a href="#多通道（multi-channel）" class="headerlink" title="多通道（multi-channel）"></a>多通道（multi-channel）</h3><p>多通道是指预训练的词向量不只是一种，一般是两种（word2vec和GloVe）。针对不同的任务，一种通道的词向量会进行调整而另一种通道的词向量不会发生改变保持词之间的相似性。</p><h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><h4 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a>Dropout</h4><p>随机丢弃部分神经元的数据，减少神经元之间联系的紧密性：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.Dropout(p=<span class="number">0.45</span>) <span class="comment"># p=&gt;probability</span></span><br></pre></td></tr></table></figure></p><h4 id="batch-normalization"><a href="#batch-normalization" class="headerlink" title="batch normalization"></a>batch normalization</h4><p>减少每一层过拟合问题。用于在上一层的输出要进入下一层之前。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;卷积&quot;&gt;&lt;a href=&quot;#卷积&quot; class=&quot;headerlink&quot; title=&quot;卷积&quot;&gt;&lt;/a&gt;卷积&lt;/h3&gt;&lt;p&gt;在NLP中，对一个句子中的word embeddings做卷积是对这个句子提取特征，具体是用一个卷积核对句子的word embeddings
      
    
    </summary>
    
    
    
      <category term="NLP" scheme="http://wangld5.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>NLPlearning-report-3</title>
    <link href="http://wangld5.github.io/2019/10/21/NLPlearning-report-4/"/>
    <id>http://wangld5.github.io/2019/10/21/NLPlearning-report-4/</id>
    <published>2019-10-21T03:21:41.000Z</published>
    <updated>2019-10-30T02:06:51.215Z</updated>
    
    <content type="html"><![CDATA[<h3 id="依存分析"><a href="#依存分析" class="headerlink" title="依存分析"></a>依存分析</h3><p>目的：其中一个用处是在进行机器翻译的时候根据语义的依赖关系达到更好的翻译效果</p><h4 id="Transition-Based-Dependency-Parsing"><a href="#Transition-Based-Dependency-Parsing" class="headerlink" title="Transition-Based Dependency Parsing"></a>Transition-Based Dependency Parsing</h4><p>对于一个句子中的每个单词，找到他们之间的修饰和被修饰关系，其中用于修饰的单词被称为独立项，被修饰的单词被称为头部，通过这样的（头部，独立项）的关系对建立语义依存树，接下来的问题就是如何建立这样一棵树，即对于一个输入序列建立依存关系序列。</p><h4 id="Greedy-Deterministic-Transition-Based-Parsing"><a href="#Greedy-Deterministic-Transition-Based-Parsing" class="headerlink" title="Greedy Deterministic Transition-Based Parsing"></a>Greedy Deterministic Transition-Based Parsing</h4><p>这是一个用于找到一个句子中依存关系序列的方法，这个模型系统是一个状态系统，状态包括一个栈，一个缓存(buffer)，以及一个依赖集合（我们最后想要的结果）。<br>状态转移过程方法：  </p><ol><li>shift，将缓存中的第一个单词移动到栈中。</li><li>left-arc，将栈中的第二个元素移出栈并标记其和栈顶元素有（头部，独立项）的依赖关系，其中栈顶元素作为头部。</li><li>right-arc，将栈中的第一个元素移出栈并标记它和栈中第二个元素有依赖关系，其中栈顶元素作为独立项。  </li></ol><h3 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h3><p>循环神经网络，一个神经元的输入包括了上一个神经元的输入和当前的输入，输出可以作为下一个神经元的输入，用于建立神经元之间的联系。<br><img src="https://github.com/Wangld5/images/raw/master/images/RNN.png" alt><br>对权重进行求导的结果为：<br>$\frac {\partial E_k} {\partial W}=\frac{E_k}{H_k}\frac{H_k}{C_k}(\prod_{t=2}^k\frac{C_t}{C_{t-1}})\frac{C_1}{W}$<br>RNN的缺点：<br>梯度消失：$\prod_{t=2}^k\frac{C_t}{C_{t-1}}$接近于0时会导致整个式子趋向于0，进而使梯度消失。<br>梯度爆炸：$\prod_{t=2}^k\frac{C_t}{C_{t-1}}$大于1时会导致整个式子变得无穷大使梯度爆炸，无法计算梯度。   </p><h3 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h3><p>LSTM的两个状态包括：h（隐藏层状态，对短期输入非常敏感）和c（单元状态，对长期输入非常敏感），对于长期状态和短期状态的控制：<br>第一个开关，负责控制继续保存长期状态c；<br>第二个开关，负责控制把即时状态输入到长期状态c；<br>第三个开关，负责控制是否把长期状态c作为当前的LSTM的输出。<br><img src="https://github.com/Wangld5/images/raw/master/images/LSTM-control.png" alt></p><p><img src="https://github.com/Wangld5/images/raw/master/images/LSTM.png" alt><br>遗忘门：$f_t=\sigma(W^fx_t+U^fh_{t-1})$<br>输入门：$i_t=\sigma(W^ix_t+U^ih_{t-1})$<br>输出门：$o_t=\sigma(W^ox_t+U^oh_{t-1})$<br>新的记忆单元：$\hat{c}=tanh(W^cx_t+U^ch_{t-1})$<br>最终记忆单元：$c=f_t\circ c_{t-1}+i_t\circ \hat{c}$<br>隐藏层：$h=o_t\circ tanh(c_t)$<br>遗忘层的作用是用一定概率遗忘掉上一个最终记忆单元的状态，输入门判断当前的记忆单元是否保留，保留多少。通过遗忘门和输入门判断当前记忆单元和上一个记忆单元的保留量。最后是隐藏层决定记忆单元的输出量是多少。<br>关于对梯度消失的改善的个人理解：<br>在上述倒数第二条式子中，当$c_t$对$c_{t-1}$求导时，结果为遗忘门的输出$f_t$，要改善梯度消失无非是让$f_t$的值为1，这可以在一开始的时候将sigmoid函数里面的参数的值设置的大一点比如加一个比较大的偏置，这样就会使sigmoid函数接近于1而不会使梯度消失，但随着训练过程的进行很难保证sigmoid函数的值接近于1，有时候当$f_t$的值接近于0时会导致当前的单元状态不会受到上一个单元状态的影响，表示刻意忘掉一些信息。</p><h3 id="GRU"><a href="#GRU" class="headerlink" title="GRU"></a>GRU</h3><p>整个神经元包括了更新门和重置门。<br><img src="https://github.com/Wangld5/images/raw/master/images/GRU.png" alt><br>重置门：$r_t=\sigma(W^rx_t+U^rh_{t-1})$<br>更新门：$z_t=\sigma(W^zx_t+U^zh_{t-1})$<br>新的记忆单元：$\hat{h}=tanh(rt\circ Uh_{t-1}+Wx_t)$<br>隐藏层状态：$h=(1-z_t)h_{t-1}+z_t\hat{h}$<br>GRU是在LSTM是基础上进行改进，用于改善梯度消失问题，因为sigmiod函数的值域为(0,1)，当更新门的值为0的时候，下一个隐藏层的值就等于上一个隐藏层的值，那么在进行反向传播的时候这两个层的梯度接近一致，在关键的时间点上会使梯度接近和上一个梯度一致的状态进而减缓梯度消失的速度，在一定程度上改善梯度消失。</p><h3 id="注意力机制"><a href="#注意力机制" class="headerlink" title="注意力机制"></a>注意力机制</h3><p>在seq2seq的机器翻译模型中，输入会经过encoder层的编码，编码后的变量会经过decoder层的解码输出。对于encoder层的编码结果不应该使用LSTM对每个词进行编码然后统一到最后一个hidden层作为输出，注意力机制的引入就是给每一个词一种权重机制，通过输入的词语的分数判断下一个输出词语是什么。<br>$s_i=f(s_{i-1},y_{i-1},c_i)$<br>其中$s_i$为要计算的当前隐藏层的状态，$s_{i-1}$为上一个隐藏层状态，$y_{i-1}$为上一个预测出的单词向量，$c_i$是一个上下文向量，用来捕捉和要预测的词语有关联的上下文信息。<br>计算$c_i$的步骤如下：<br>首先根据原句和上一个隐藏层状态计算当前神经元的一个分数：<br>$e_{i,j}=a(s_{i-1}, h_j)$<br>其中$h_j$为原句中的每一个单词对应的隐藏层状态。<br>然后将这些计算出来的分数放到softmax函数中分别求出它们的概率分布$\alpha_{i,j}$，便于判断他们对于要预测的单词的影响程度。<br>根据计算出来的这些原句中单词对应的概率计算要预测的单词的权重，即之前说的$c_i$，因为与上下文有关，因此可以理解为上下文信息。<br>$c_i=\sum_{j=1}^n\alpha_{i,j}h_j$</p><p>啦啦啦啦啦啦啦</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;依存分析&quot;&gt;&lt;a href=&quot;#依存分析&quot; class=&quot;headerlink&quot; title=&quot;依存分析&quot;&gt;&lt;/a&gt;依存分析&lt;/h3&gt;&lt;p&gt;目的：其中一个用处是在进行机器翻译的时候根据语义的依赖关系达到更好的翻译效果&lt;/p&gt;
&lt;h4 id=&quot;Transition-
      
    
    </summary>
    
    
    
      <category term="NLP" scheme="http://wangld5.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>NLP-learning-report2</title>
    <link href="http://wangld5.github.io/2019/10/14/NLP-learning-report2/"/>
    <id>http://wangld5.github.io/2019/10/14/NLP-learning-report2/</id>
    <published>2019-10-14T08:14:10.000Z</published>
    <updated>2019-10-15T02:10:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前向传播"><a href="#前向传播" class="headerlink" title="前向传播"></a>前向传播</h3><p>考虑样本数据(x, y)，其中x为输入数据，y为实际数据，设根据x手动预测的值为y’，预测y’的过程是从输入层开始从左往右计算的，这个过程也叫前向传播。</p><h3 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h3><p>对神经网络中参数的优化过程，在神经网络中为了使预测值更接近于实际值，需要使用损失函数进行评估，为了优化损失函数使其值最小化，需要通过梯度下降法对损失函数进行求导进而优化神经元的权重和偏置，因为是从后往前更新参数，也叫后向传播。<br>常用的损失函数有交叉熵损失函数和softmax损失函数。</p><h3 id="skip-gram算法实现"><a href="#skip-gram算法实现" class="headerlink" title="skip-gram算法实现"></a>skip-gram算法实现</h3><p>对于Word2vec算法，目的在于使用一个窗口，通过中心词c和窗口中的外围词o，估计词的意思。而skip-gram模型是习得概率分布P(O=o|O=c)即中心词出现时外围词出现的概率进而通过中心词c估计外围词o的含义。<br>在word2vec中，这个条件概率分布是通过计算向量点积（dot-products），再应用naive-softmax函数得到的：<br><img src="https://github.com/Wangld5/images/raw/master/images/formation1.PNG" alt><br>其中u_o代表外围词，v_c代表中心词，我们使用U和V包含对应的所有词，这里我使用行向量表示词向量。<br>定义对应的损失函数如下：<br><img src="https://github.com/Wangld5/images/raw/master/images/formation2.PNG" alt><br>为了使损失函数最小就要使概率最大化，即使c与o的关联更为紧密。设定如下变量：<br>y’对应公式(1)的结果，即预测值,y’_k表示第k个单词的概率大小<br>y对应真实值，这是一个one-hot向量。</p><h4 id="偏导数"><a href="#偏导数" class="headerlink" title="偏导数"></a>偏导数</h4><p>由于权重矩阵为矩阵U和V，因此需要求中心词和外围词的倒数:<br>对u_w :  <img src="https://github.com/Wangld5/images/raw/master/images/formation3.PNG" alt><br>对v_c :  <img src="https://github.com/Wangld5/images/raw/master/images/formation4.PNG" alt><br>损失函数为: <img src="https://github.com/Wangld5/images/raw/master/images/formation5.PNG" alt><br>这个偏导数和损失函数的计算是naive-softmax函数的计算，但用这个函数进行梯度下降迭代优化损失函数会消耗很长时间，因为每次迭代都需要调整整个权重矩阵，这就需要我们通过大量的训练样本来调整使训练速度减慢。</p><h4 id="negative-softmax"><a href="#negative-softmax" class="headerlink" title="negative-softmax"></a>negative-softmax</h4><p>这个方法是找和中心词不相关的词，进而可以确定哪些外围词和中心词有关系。寻找的方法是从数据集中找K个不在窗口中的单词向量。和原来的中心词组成（K+1，V）的向量矩阵。<br>损失函数为：<br><img src="https://github.com/Wangld5/images/raw/master/images/formation6.PNG" alt><br>对v_c的偏导数：<br><img src="https://github.com/Wangld5/images/raw/master/images/formation7.PNG" alt><br>对u_w的偏导数：<br><img src="https://github.com/Wangld5/images/raw/master/images/formation8.PNG" alt><br>用这种方法进行梯度下降的迭代会很快，因为只需要抽取几个无关单词向量进行更新迭代小部分权重而不需要对整个权重矩阵进行更新。</p><h4 id="总损失函数"><a href="#总损失函数" class="headerlink" title="总损失函数"></a>总损失函数</h4><p>对于窗口下的总的损失函数只需要把这个窗口下中心词对应的那些外围词的损失函数相加即可。</p><h4 id="代码实现如下："><a href="#代码实现如下：" class="headerlink" title="代码实现如下："></a>代码实现如下：</h4><p>对于下面代码：<br>我的单词向量是1*V的行向量。<br>naive-softmax部分：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a, W, target = centerWordVec, outsideVectors, outsideWordIdx</span><br><span class="line">a = a.reshape((<span class="number">1</span>, a.shape[<span class="number">0</span>]))</span><br><span class="line"><span class="comment"># assume N words, V dimentions, so</span></span><br><span class="line"><span class="comment"># a.shape == (1, V) W.shape == (N, V) i.e: a is 1 * 3, W is 5 * 3</span></span><br><span class="line"></span><br><span class="line">z = np.dot(a, W.T) <span class="comment"># (1, N)</span></span><br><span class="line"><span class="comment">#print(z.shape)</span></span><br><span class="line">preds = softmax(z) <span class="comment"># (1, N)</span></span><br><span class="line"><span class="comment">#print(preds[0][target])</span></span><br><span class="line"></span><br><span class="line">loss = -np.log(preds[<span class="number">0</span>][target])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># backprop</span></span><br><span class="line">delta = preds.copy() <span class="comment"># (1, N)</span></span><br><span class="line">delta[<span class="number">0</span>][target] -= <span class="number">1.0</span></span><br><span class="line"><span class="comment">#print(delta.shape)</span></span><br><span class="line"></span><br><span class="line">gradCenterVec = np.dot(delta, W) <span class="comment"># (1, V) dJ/dv_c = (y_hat-y)*U</span></span><br><span class="line"></span><br><span class="line">gradOutsideVecs = np.dot(delta.T, a) <span class="comment"># (N, V) (y_hat-y)*v_c</span></span><br></pre></td></tr></table></figure></p><p>neg-softmax部分：<br>这一部分要先将选择的无关单词和中心词构建一个矩阵，然后进行计算，因为涉及矩阵运算而且y为one-hot矩阵，因此计算损失函数的时候有一点小技巧，这个不难理解。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">W = np.zeros((len(indices), outsideVectors.shape[<span class="number">1</span>]))<span class="comment"># (K+1, V)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(indices)):</span><br><span class="line">    W[i] = outsideVectors[indices[i]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># forward</span></span><br><span class="line">a = centerWordVec</span><br><span class="line">a = a.reshape((<span class="number">1</span>, a.shape[<span class="number">0</span>])) <span class="comment"># (1, V)</span></span><br><span class="line"></span><br><span class="line">z = np.dot(a, W.T) <span class="comment"># (1, 1+K)</span></span><br><span class="line">preds = sigmoid(z) <span class="comment"># (1, K+1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># backprop</span></span><br><span class="line">y = np.zeros((<span class="number">1</span>, preds.shape[<span class="number">1</span>]))</span><br><span class="line">y[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span> <span class="comment"># index 0 is target</span></span><br><span class="line"></span><br><span class="line">loss = -(y*np.log(preds) + (<span class="number">1</span> - y)*np.log(<span class="number">1</span> - preds)).sum()</span><br><span class="line"></span><br><span class="line">delta = preds - y <span class="comment"># (1, 1+K)</span></span><br><span class="line"><span class="comment">#print(delta.shape)</span></span><br><span class="line">gradCenterVec = np.dot(delta, W) <span class="comment"># (1, V)</span></span><br><span class="line">gradW = np.dot(delta.T, a) <span class="comment"># (K+1, V)</span></span><br><span class="line"></span><br><span class="line">gradOutsideVecs = np.zeros_like(outsideVectors)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(indices)):</span><br><span class="line">    oi = indices[i]</span><br><span class="line">    gradOutsideVecs[oi] += gradW[i]</span><br></pre></td></tr></table></figure></p><p>总的损失函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">loss = <span class="number">0.0</span></span><br><span class="line">gradCenterVecs = np.zeros(centerWordVectors.shape)</span><br><span class="line"><span class="comment">#print(centerWordVectors[0])</span></span><br><span class="line">gradOutsideVectors = np.zeros(outsideVectors.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">### YOUR CODE HERE</span></span><br><span class="line">ci = word2Ind[currentCenterWord]</span><br><span class="line">vc = centerWordVectors[ci]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> o <span class="keyword">in</span> outsideWords:</span><br><span class="line">    oi = word2Ind[o]</span><br><span class="line">    loss_, gradVc, gradUo = word2vecLossAndGradient(vc, oi, outsideVectors, dataset)</span><br><span class="line">    gradVc = gradVc.reshape(<span class="number">-1</span>)</span><br><span class="line">    <span class="comment">#gradUo = gradUo.reshape(-1)</span></span><br><span class="line">    gradCenterVecs[ci] += gradVc</span><br><span class="line">    gradOutsideVectors += gradUo</span><br><span class="line">    loss += loss_</span><br></pre></td></tr></table></figure></p><h4 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h4><p>调用函数计算梯度，然后在初始值x的基础上减去梯度进行迭代直到损失降到一个给定范围。</p><h4 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h4><p><img src="https://github.com/Wangld5/NLPlearning/raw/master/a2/word_vectors.png" alt><br>在这些结果中我们可以看出（male-&gt;female）和（king-&gt;queen）两者关系平行，而snow和cool有相似的关系</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前向传播&quot;&gt;&lt;a href=&quot;#前向传播&quot; class=&quot;headerlink&quot; title=&quot;前向传播&quot;&gt;&lt;/a&gt;前向传播&lt;/h3&gt;&lt;p&gt;考虑样本数据(x, y)，其中x为输入数据，y为实际数据，设根据x手动预测的值为y’，预测y’的过程是从输入层开始从左往右计
      
    
    </summary>
    
    
    
      <category term="NLP" scheme="http://wangld5.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>NLP-learning-report1</title>
    <link href="http://wangld5.github.io/2019/10/10/NLP-learning-report1/"/>
    <id>http://wangld5.github.io/2019/10/10/NLP-learning-report1/</id>
    <published>2019-10-10T02:59:12.000Z</published>
    <updated>2019-10-15T02:01:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="word-embeddings"><a href="#word-embeddings" class="headerlink" title="word embeddings"></a>word embeddings</h3><p>单词嵌入是指通过建立单词间联系的向量通过向量的形式特征化单词，例如使用共现矩阵或者word2vec的方式构造单词向量。</p><h3 id="词向量"><a href="#词向量" class="headerlink" title="词向量"></a>词向量</h3><p>在NLP中，使用向量代表一个单词，词向量又被称为word embeddings。<br>获得词向量的方法包括one-hot,即建立一个one-hot矩阵表示一个词，但这样的话会导致不同的单词有不同的矩阵且他们之间没有任何联系。<br>第二种方法是使用共现矩阵，具体的实现是通过定位中心词汇和窗口大小，利用中心词汇的上下文词汇来构造一个矩阵，在这个矩阵中我们可以判断出与中心词汇频繁出现的词汇有哪些，通过SVD来对这个矩阵进行降维找到特征值相近的两个单词，那么这两个单词的语义或语境就相似。共现矩阵是统计方法.<br><img src="https://github.com/Wangld5/images/raw/master/images/report-1.PNG" alt><br>第三种是word2vec，主要分为CBOW（Continuous Bag of Words）和Skip-Gram两种模式。CBOW是从原始语句推测目标字词，对于CBOW而言,具体过程是  </p><ol><li>为每一个单词的上下文词汇生成一个one-hot向量</li><li>通过输入词向量矩阵U的权重矩阵和这些上下文词汇生成的one-hot向量的乘积</li><li>求乘积的均值.</li><li>根据均值和输出权重矩阵V的乘积得到一个分数，将这个分数放进softmax函数中求得与真实值的差距。</li><li>关于权重矩阵的求法，使用SGD使一下公式的结果最小化:<br><img src="https://github.com/Wangld5/images/raw/master/images/report-2.PNG" alt><br>这里补充的是无论是U矩阵还是V矩阵，其中的列向量在一开始都是随机生成的，为了使概率最大化，在中心词汇每次出现在语料库的时候使用SGD更新概率使概率达到最大值。</li></ol><p>而Skip-Gram正好相反，是从目标字词推测出原始语句。过程和CBOW相反。</p><h3 id="相似性评估"><a href="#相似性评估" class="headerlink" title="相似性评估"></a>相似性评估</h3><p>评估一个单词向量对的相似性可以使用余弦距离，两个单词向量对的余弦距离短，则说明相似性高。</p><h3 id="共现矩阵实现："><a href="#共现矩阵实现：" class="headerlink" title="共现矩阵实现："></a>共现矩阵实现：</h3><p><a href="https://github.com/Wangld5/NLPlearning/blob/master/a1/exploring_word_vectors.ipynb" target="_blank" rel="noopener">传送门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;word-embeddings&quot;&gt;&lt;a href=&quot;#word-embeddings&quot; class=&quot;headerlink&quot; title=&quot;word embeddings&quot;&gt;&lt;/a&gt;word embeddings&lt;/h3&gt;&lt;p&gt;单词嵌入是指通过建立单词间联系的向量
      
    
    </summary>
    
    
    
      <category term="NLP" scheme="http://wangld5.github.io/tags/NLP/"/>
    
  </entry>
  
</feed>
